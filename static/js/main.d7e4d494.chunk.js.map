{"version":3,"sources":["context/index.ts","components/Todo.tsx","components/Todos.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalContext","React","createContext","todos","globalReducer","state","action","type","payload","Object","objectSpread","toConsumableArray","filter","todo","id","Todo","title","completed","dispatch","useContext","react_default","a","createElement","ListItem","ListItemAvatar","Avatar","Notes_default","ListItemText","primary","String","secondary","concat","ListItemSecondaryAction","IconButton","onClick","deleteTodo","edge","aria-label","Delete_default","useStyles","makeStyles","theme","root","display","justifyContent","demo","backgroundColor","palette","background","paper","margin","spacing","fontSize","Todos","classes","useEffect","fetch","then","res","json","console","log","className","Grid","item","xs","md","Typography","variant","List","map","assign","key","flexGrow","menuButton","marginRight","App","Fragment","AppBar","position","Toolbar","color","Boolean","window","location","hostname","match","createMuiTheme","blue","ReactDOM","render","ThemeProvider","_ref","children","initialState","_React$useReducer","useReducer","_React$useReducer2","slicedToArray","Provider","value","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8QAiBaA,EAAgBC,IAAMC,cALP,CAC1BC,MAAO,KAOF,SAASC,EAAcC,EAAcC,GAAuB,IACzDC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QACNL,EAAUE,EAAVF,MAER,OAAQI,GACN,IAAK,YACH,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GACFJ,EADL,CAEEF,MAAOK,IAEX,IAAK,eACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFJ,EADL,CAEEF,MAAOM,OAAAE,EAAA,EAAAF,CAAIN,GAAOS,OAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAON,MAEjD,QACE,OAAOH,yFCtBE,SAASU,EAAKF,GAAiB,IACpCC,EAAyBD,EAAzBC,GAAIE,EAAqBH,EAArBG,MAAOC,EAAcJ,EAAdI,UAEXC,EADcjB,IAAMkB,WAAWnB,GAC/BkB,SAMR,OACEE,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,QAGJD,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,QAASZ,EAAQa,OAAOb,GAAS,KACjCc,UAAS,cAAAC,OAAgBF,OAAOZ,MAElCG,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACEC,QAAS,kBAjBE,SAACpB,GAClBI,EAAS,CAAEX,KAAM,eAAgBC,QAASM,IAgBrBqB,CAAWrB,IAC1BsB,KAAK,MACLC,aAAW,UAEXjB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,SCjCV,IAAMkB,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,QAAS,OACTC,eAAgB,UAElBC,KAAM,CACJC,gBAAiBL,EAAMM,QAAQC,WAAWC,OAE5CjC,MAAO,CACLkC,OAAQT,EAAMU,QAAQ,EAAG,EAAG,GAC5BC,SAAU,aAIC,SAASC,IACtB,IAAMjD,EAAgBH,IAAMkB,WAAWnB,GAC/BK,EAAoBD,EAApBC,MAAOa,EAAad,EAAbc,SACPf,EAAUE,EAAVF,MACFmD,EAAUf,IAYhB,OAVAgB,oBAAU,WACRC,MAAM,8CACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACJzC,EAAS,CAAEX,KAAM,YAAaC,QAASmD,OAE1C,IAEHC,QAAQC,IAAI,QAASxD,GAGnBe,EAAAC,EAAAC,cAAA,OAAKwC,UAAWR,EAAQZ,MACrBvC,GACCiB,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAYC,QAAQ,KAAKN,UAAWR,EAAQtC,OAA5C,iBAGAI,EAAAC,EAAAC,cAAA,OAAKwC,UAAWR,EAAQT,MACtBzB,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,KACGlE,EAAMmE,IAAI,SAACzD,GAAD,OACTO,EAAAC,EAAAC,cAACP,EAADN,OAAA8D,OAAA,CAAMC,IAAK3D,EAAKC,IAAQD,UC1CxC,IAAM0B,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJ+B,SAAU,GAEZC,WAAY,CACVC,YAAalC,EAAMU,QAAQ,OAwBhByB,EApBO,WACpB,IAAMtB,EAAUf,IAChB,OACEnB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAwD,SAAA,KACEzD,EAAAC,EAAAC,cAAA,OAAKwC,UAAWR,EAAQZ,MACtBtB,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAQC,SAAS,UACf3D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAASZ,QAAQ,SACfhD,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAYC,QAAQ,KAAKa,MAAM,WAA/B,6BAMN7D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+B,EAAD,SChBY6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,gGCRA7C,EAAQ8C,YAAe,CAC3BxC,QAAS,CACPnB,QAAS4D,OAiBbC,IAASC,OACPtE,EAAAC,EAAAC,cAACqE,EAAA,EAAD,CAAelD,MAAOA,GACpBrB,EAAAC,EAAAC,cAd2B,SAAAsE,GAA+B,IAA5BC,EAA4BD,EAA5BC,SAC1BC,EAAe7F,IAAMkB,WAAWnB,GADsB+F,EAElC9F,IAAM+F,WAAW5F,EAAe0F,GAFEG,EAAAxF,OAAAyF,EAAA,EAAAzF,CAAAsF,EAAA,GAErD1F,EAFqD4F,EAAA,GAE9C/E,EAF8C+E,EAAA,GAI5D,OAEE7E,EAAAC,EAAAC,cAACtB,EAAcmG,SAAf,CAAwBC,MAAO,CAAE/F,QAAOa,aACrC2E,IAOH,KACEzE,EAAAC,EAAAC,cAAC+E,EAAD,QAGJC,SAASC,eAAe,SDsGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.d7e4d494.chunk.js","sourcesContent":["import React from 'react';\nimport { TodoProps } from '../types';\n\ntype Action = {\n  type: string;\n  payload: any;\n};\n\ntype State = {\n  todos: TodoProps[];\n};\n\nconst initialState: State = {\n  todos: []\n};\n\n/// _____ GLOBAL CONTEXT FOR REDUCER ____________________\nexport const GlobalContext = React.createContext<State | any>(initialState);\n\n/// __________________ GLOBAL REDUCER ____________________\nexport function globalReducer(state: State, action: Action): State {\n  const { type, payload } = action;\n  const { todos } = state;\n\n  switch (type) {\n    case 'SET_TODOS':\n      return {\n        ...state,\n        todos: payload\n      };\n    case 'DELETE_TODOS':\n      return {\n        ...state,\n        todos: [...todos].filter(todo => todo.id !== payload)\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport {\n  IconButton,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  Avatar,\n  ListItemSecondaryAction\n} from '@material-ui/core';\nimport NotesIcon from '@material-ui/icons/Notes';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { GlobalContext } from '../context';\nimport { TodoProps } from '../types';\n\nexport default function Todo(todo: TodoProps) {\n  const { id, title, completed } = todo;\n  const globalReducer = React.useContext(GlobalContext);\n  const { dispatch } = globalReducer;\n\n  const deleteTodo = (id: number): void => {\n    dispatch({ type: 'DELETE_TODOS', payload: id });\n  };\n\n  return (\n    <ListItem>\n      <ListItemAvatar>\n        <Avatar>\n          <NotesIcon />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemText\n        primary={title ? String(title) : null}\n        secondary={`Completed: ${String(completed)}`}\n      />\n      <ListItemSecondaryAction>\n        <IconButton\n          onClick={() => deleteTodo(id)}\n          edge=\"end\"\n          aria-label=\"Delete\"\n        >\n          <DeleteIcon />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { Grid, Typography, List } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { GlobalContext } from '../context';\nimport { TodoProps } from '../types';\nimport Todo from './Todo';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  demo: {\n    backgroundColor: theme.palette.background.paper\n  },\n  title: {\n    margin: theme.spacing(4, 3, 2),\n    fontSize: '1.5rem'\n  }\n}));\n\nexport default function Todos() {\n  const globalReducer = React.useContext(GlobalContext);\n  const { state, dispatch } = globalReducer;\n  const { todos } = state;\n  const classes = useStyles();\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/todos')\n      .then(res => res.json())\n      .then(json => {\n        dispatch({ type: 'SET_TODOS', payload: json });\n      });\n  }, []);\n\n  console.log('state', state);\n\n  return (\n    <div className={classes.root}>\n      {todos && (\n        <Grid item xs={12} md={6}>\n          <Typography variant=\"h6\" className={classes.title}>\n            List of Todos\n          </Typography>\n          <div className={classes.demo}>\n            <List>\n              {todos.map((todo: TodoProps) => (\n                <Todo key={todo.id} {...todo} />\n              ))}\n            </List>\n          </div>\n        </Grid>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\nimport Todos from './Todos';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nconst App: React.FC = (): JSX.Element => {\n  const classes = useStyles();\n  return (\n    <>\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar variant=\"dense\">\n            <Typography variant=\"h6\" color=\"inherit\">\n              Hooks TypeScript Todos\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </div>\n      <div>\n        <Todos />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport { GlobalContext, globalReducer } from './context';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue\n  }\n});\n\n// root state wrapper will provide context for all children to access the global reducer\nconst StateWrapper: React.FC = ({ children }): JSX.Element => {\n  const initialState = React.useContext(GlobalContext); // initialize context\n  const [state, dispatch] = React.useReducer(globalReducer, initialState); // use context as the state for the reducer instance\n\n  return (\n    // wrapper component\n    <GlobalContext.Provider value={{ state, dispatch }}>\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <StateWrapper>\n      <App />\n    </StateWrapper>\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}